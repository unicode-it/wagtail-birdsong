# Generated by Django 3.2.16 on 2023-03-20 10:59

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import wagtail.fields


class Migration(migrations.Migration):

    dependencies = [
        ('wagtailcore', '0078_referenceindex'),
        ('taggit', '0005_auto_20220424_2025'),
        ('birdsong', '0009_auto_20221222_1737'),
    ]

    operations = [
        migrations.CreateModel(
            name='BirdsongSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('double_opt_in_enabled', models.BooleanField(default=False, help_text='Attention: By enabling this, unconfirmed contacts older than a week get deleted when creating, editing or copying a campagin. Contacts are unconfirmed by default.', verbose_name='Enable double opt-in')),
                ('confirmation_email_subject', models.CharField(default='Confirm newsletter registration', max_length=150, null=True, verbose_name='Subject of confirmation e-mail')),
                ('confirmation_email_body', wagtail.fields.RichTextField(default='Click the following link if you want register for our newsletter. Otherwise no action is neccessary.', help_text='This Text is part of the e-mail that is sent after registration for a campaign', null=True, verbose_name='Content of confirmation e-mail')),
                ('campaign_confirmation_redirect', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='Redirect page after confirmation of campaign signup')),
                ('campaign_signup_redirect', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='Redirect page after signup for a campaign')),
                ('campaign_unsubscribe_success', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='Success page for unsubscription')),
            ],
            options={
                'verbose_name': 'Birdsong settings',
            },
        ),
        migrations.AlterField(
            model_name='campaign',
            name='name',
            field=models.CharField(help_text='The name of the campaign', max_length=255, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='receipts',
            field=models.ManyToManyField(through='birdsong.Receipt', to='birdsong.Contact', verbose_name='receipts'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='sent_date',
            field=models.DateTimeField(blank=True, null=True, verbose_name='sent date'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='status',
            field=models.IntegerField(choices=[(0, 'unsent'), (1, 'sending'), (2, 'sent'), (3, 'failed')], default=0, verbose_name='status'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='subject',
            field=models.TextField(verbose_name='subject'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='confirmed_at',
            field=models.DateTimeField(null=True, verbose_name='confirmed at'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, verbose_name='created at'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='email',
            field=models.EmailField(max_length=254, verbose_name='email'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='is_confirmed',
            field=models.BooleanField(default=False, verbose_name='is confirmed'),
        ),
        migrations.AlterField(
            model_name='contact',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='birdsong.ContactTag', to='taggit.Tag', verbose_name='tags'),
        ),
        migrations.DeleteModel(
            name='DoubleOptInSettings',
        ),
    ]
